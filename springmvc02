配置前端控制器
  在web.xml中配置前端控制器。
  <servlet>
  	<servlet-name>springmvc</servlet-name>
  	<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
  	<init-param>
  	<!--配置springmvc加载的配置文件-->
  		<param-name>contextConfigLocation</param-name>
  		<!-- 在classpath下配置 -->
  		<param-value>classpath:springmvc.xml</param-value>
  	</init-param>
  </servlet>
  <servlet-mapping>
  	<servlet-name>springmvc</servlet-name>
  	<url-pattern>
  	<!-- 第一种 *.action 访问以.action结尾，由dispatcherservlet进行解析 -->
  	*.action
  	<!-- 第二种／所有访问的地址都由前端控制器解析。对于静态的文件解析需要配置，不让ds解析。使用此方法可以实现restful风格的url-->
  	<!-- /*这种配置不对，使用这种配置，最终仍会转发到一个jsp页面，仍然会由ds解析，不能根据jsp找到handler，会报错 -->
  	</url-pattern>
  </servlet-mapping>
  
    配置handlerAdaptor:此适配器能够执行controller接口的handler
     <bean class = "org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"></bean>

   编写handler，需要实现controller接口。
   public class ItemsController1 implements Controller{
          @Override
          public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) throws Exception {
            
            //返回ModelAndView 
            ModelAndView modelandview = new ModelAndView();
            //相当于request的setAttribute，可以在jsp页面中取出数据。
            modelandview.addObject("items",new ArrayList<Integer>());
            //指定视图
            modelandview.setViewName("/WEB-INF/jsp/items/items.jsp");

            return modelandview;
          }
    }
    配置handler给映射器查找：<bean name = "/queryItems.action" class = "org.samlau.ssm.controller.ItemsController1"/>
    
    视图的编写：参考jsp
   
     配置handlermapping,此映射器将name作为url进行查找，需要在配置handler时指定beanname
     <bean class ="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"></bean> 
     
    配置view resolver(jsp)
    <bean class = "org.springframework.web.servlet.view.InternalResourceViewResolver" />
    
    
